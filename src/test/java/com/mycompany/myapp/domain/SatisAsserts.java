package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class SatisAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSatisAllPropertiesEquals(Satis expected, Satis actual) {
        assertSatisAutoGeneratedPropertiesEquals(expected, actual);
        assertSatisAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSatisAllUpdatablePropertiesEquals(Satis expected, Satis actual) {
        assertSatisUpdatableFieldsEquals(expected, actual);
        assertSatisUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSatisAutoGeneratedPropertiesEquals(Satis expected, Satis actual) {
        assertThat(expected)
            .as("Verify Satis auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSatisUpdatableFieldsEquals(Satis expected, Satis actual) {
        assertThat(expected)
            .as("Verify Satis relevant properties")
            .satisfies(e ->
                assertThat(e.getSatisTarihi())
                    .as("check satisTarihi")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getSatisTarihi())
            )
            .satisfies(e -> assertThat(e.getMiktar()).as("check miktar").isEqualTo(actual.getMiktar()))
            .satisfies(e ->
                assertThat(e.getToplamFiyat())
                    .as("check toplamFiyat")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getToplamFiyat())
            )
            .satisfies(e -> assertThat(e.getOdemeDurumu()).as("check odemeDurumu").isEqualTo(actual.getOdemeDurumu()))
            .satisfies(e -> assertThat(e.getTeslimatAdresi()).as("check teslimatAdresi").isEqualTo(actual.getTeslimatAdresi()))
            .satisfies(e -> assertThat(e.getSiparisNotu()).as("check siparisNotu").isEqualTo(actual.getSiparisNotu()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSatisUpdatableRelationshipsEquals(Satis expected, Satis actual) {
        assertThat(expected)
            .as("Verify Satis relationships")
            .satisfies(e -> assertThat(e.getMusteri()).as("check musteri").isEqualTo(actual.getMusteri()))
            .satisfies(e -> assertThat(e.getUrun()).as("check urun").isEqualTo(actual.getUrun()));
    }
}
