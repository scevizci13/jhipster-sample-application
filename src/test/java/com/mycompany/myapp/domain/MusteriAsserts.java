package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class MusteriAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMusteriAllPropertiesEquals(Musteri expected, Musteri actual) {
        assertMusteriAutoGeneratedPropertiesEquals(expected, actual);
        assertMusteriAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMusteriAllUpdatablePropertiesEquals(Musteri expected, Musteri actual) {
        assertMusteriUpdatableFieldsEquals(expected, actual);
        assertMusteriUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMusteriAutoGeneratedPropertiesEquals(Musteri expected, Musteri actual) {
        assertThat(expected)
            .as("Verify Musteri auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMusteriUpdatableFieldsEquals(Musteri expected, Musteri actual) {
        assertThat(expected)
            .as("Verify Musteri relevant properties")
            .satisfies(e -> assertThat(e.getAd()).as("check ad").isEqualTo(actual.getAd()))
            .satisfies(e -> assertThat(e.getSoyad()).as("check soyad").isEqualTo(actual.getSoyad()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getTelefon()).as("check telefon").isEqualTo(actual.getTelefon()))
            .satisfies(e -> assertThat(e.getAdres()).as("check adres").isEqualTo(actual.getAdres()))
            .satisfies(e ->
                assertThat(e.getKayitTarihi())
                    .as("check kayitTarihi")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getKayitTarihi())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMusteriUpdatableRelationshipsEquals(Musteri expected, Musteri actual) {
        // empty method
    }
}
